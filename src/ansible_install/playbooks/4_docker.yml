---
- name: install docker on all machines
  hosts: all
  vars_files:
    - vars/default.yml

  any_errors_fatal: true
  become: true

  tasks:

  - name: Update apt and install docker
    apt:
      update_cache: true
      name: docker.io
      state: latest

  - name: Install Docker Module for Python
    pip:
      name: docker

  - name: Configure Docker daemon options (json)
    template:
      src: "templates/etc/docker/daemon.json.j2"
      dest: "/etc/docker/daemon.json"
      owner: "root"
      group: "root"
      mode: "0644"

  - name: Add user(s) to "docker" group
    user:
      name: "{{ item }}"
      groups: "docker"
      append: true
    loop: "{{ docker__users }}"

  - name: Manage Docker registry login credentials
    docker_login:
      registry_url: "{{ item.registry_url | d(omit) }}"
      username: "{{ item.username }}"
      password: "{{ item.password }}"
      email: "{{ item.email | d(omit) }}"
      reauthorize: "{{ item.reauthorize | d(omit) }}"
      config_path: "{{ item.config_path | d((ansible_env.PWD | d('/root')) + '/.docker/config.json') }}"
      state: "{{ item.state | d('present') }}"
    loop: "{{ docker__registries }}"
    when: item.username | d() and item.password | d()
    vars:
      ansible_python_interpreter: "{{ '/usr/bin/env python3-docker' }}"

  - name: delete cgroup settings in cmdline.txt file
    shell: sed -i 's/{{ cgroup_text }}//g' /boot/firmware/cmdline.txt
    args:
      warn: false

  - name: add cgroup settings in cmdline.txt file
    shell: sed -i '$ s/$/ {{ cgroup_text }}/' /boot/firmware/cmdline.txt
    args:
      warn: false

  - name: delete extra spaces in cmdline.txt file
    shell: sed -i 's/  / /g' /boot/firmware/cmdline.txt
    args:
      warn: false

  - name: enable the docker service
    shell: systemctl enable docker.service

  - name: Unconditionally reboot the machine with all defaults
    reboot:
